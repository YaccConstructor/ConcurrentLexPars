// Signature file for parser generated by fsyacc
module Calc.Parser
type token = 
  | IDENT
  | NUM
  | EOF
  | RPAREN
  | LPAREN
  | MINUS
  | PLUS
  | STAR
  | EQUAL
  | SEMICOLON
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_NUM
    | TOKEN_EOF
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_EQUAL
    | TOKEN_SEMICOLON
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startfile
    | NONTERM_file
    | NONTERM_f
    | NONTERM_stmt
    | NONTERM_expr
    | NONTERM_term
    | NONTERM_factor
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val file : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (int) 

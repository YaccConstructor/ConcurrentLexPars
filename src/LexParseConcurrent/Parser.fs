// Implementation file for parser generated by fsyacc
module Calc.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"


#nowarn "62";; 


# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | IDENT
  | NUM
  | EOF
  | RPAREN
  | LPAREN
  | MINUS
  | PLUS
  | STAR
  | EQUAL
  | SEMICOLON
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_NUM
    | TOKEN_EOF
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_EQUAL
    | TOKEN_SEMICOLON
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startfile
    | NONTERM_file
    | NONTERM_f
    | NONTERM_stmt
    | NONTERM_expr
    | NONTERM_term
    | NONTERM_factor

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | IDENT  -> 0 
  | NUM  -> 1 
  | EOF  -> 2 
  | RPAREN  -> 3 
  | LPAREN  -> 4 
  | MINUS  -> 5 
  | PLUS  -> 6 
  | STAR  -> 7 
  | EQUAL  -> 8 
  | SEMICOLON  -> 9 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IDENT 
  | 1 -> TOKEN_NUM 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_RPAREN 
  | 4 -> TOKEN_LPAREN 
  | 5 -> TOKEN_MINUS 
  | 6 -> TOKEN_PLUS 
  | 7 -> TOKEN_STAR 
  | 8 -> TOKEN_EQUAL 
  | 9 -> TOKEN_SEMICOLON 
  | 12 -> TOKEN_end_of_input
  | 10 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startfile 
    | 1 -> NONTERM_file 
    | 2 -> NONTERM_f 
    | 3 -> NONTERM_f 
    | 4 -> NONTERM_stmt 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_term 
    | 9 -> NONTERM_term 
    | 10 -> NONTERM_factor 
    | 11 -> NONTERM_factor 
    | 12 -> NONTERM_factor 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 12 
let _fsyacc_tagOfErrorTerminal = 10

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IDENT  -> "IDENT" 
  | NUM  -> "NUM" 
  | EOF  -> "EOF" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | STAR  -> "STAR" 
  | EQUAL  -> "EQUAL" 
  | SEMICOLON  -> "SEMICOLON" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IDENT  -> (null : System.Object) 
  | NUM  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 2us; 5us; 2us; 65535us; 7us; 8us; 21us; 10us; 4us; 65535us; 7us; 15us; 11us; 12us; 13us; 14us; 21us; 15us; 5us; 65535us; 7us; 18us; 11us; 18us; 13us; 18us; 16us; 17us; 21us; 18us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 16us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 3us; 4us; 5us; 6us; 1us; 4us; 3us; 5us; 6us; 12us; 1us; 5us; 2us; 5us; 8us; 1us; 6us; 2us; 6us; 8us; 2us; 7us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 15us; 17us; 21us; 23us; 27us; 29us; 32us; 34us; 37us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; |]
let _fsyacc_action_rows = 23
let _fsyacc_actionTableElements = [|1us; 32768us; 0us; 6us; 0us; 49152us; 2us; 32768us; 0us; 6us; 2us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 1us; 32768us; 8us; 7us; 3us; 32768us; 0us; 19us; 1us; 20us; 4us; 21us; 3us; 32768us; 5us; 13us; 6us; 11us; 9us; 9us; 0us; 16388us; 3us; 32768us; 3us; 22us; 5us; 13us; 6us; 11us; 3us; 32768us; 0us; 19us; 1us; 20us; 4us; 21us; 1us; 16389us; 7us; 16us; 3us; 32768us; 0us; 19us; 1us; 20us; 4us; 21us; 1us; 16390us; 7us; 16us; 1us; 16391us; 7us; 16us; 3us; 32768us; 0us; 19us; 1us; 20us; 4us; 21us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 3us; 32768us; 0us; 19us; 1us; 20us; 4us; 21us; 0us; 16396us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 8us; 9us; 11us; 15us; 19us; 20us; 24us; 28us; 30us; 34us; 36us; 38us; 42us; 43us; 44us; 45us; 46us; 50us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 4us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 16393us; 16394us; 16395us; 65535us; 16396us; |]
let _fsyacc_reductions ()  =    [| 
# 139 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startfile));
# 148 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'f)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "parser.fsy"
                                  1
                   )
# 22 "parser.fsy"
                 : int));
# 159 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "parser.fsy"
                              1
                   )
# 23 "parser.fsy"
                 : 'f));
# 170 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'f)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "parser.fsy"
                                     1
                   )
# 24 "parser.fsy"
                 : 'f));
# 182 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "parser.fsy"
                                                      1
                   )
# 28 "parser.fsy"
                 : 'stmt));
# 193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "parser.fsy"
                                           1
                   )
# 30 "parser.fsy"
                 : 'expr));
# 205 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "parser.fsy"
                                             1
                   )
# 31 "parser.fsy"
                 : 'expr));
# 217 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "parser.fsy"
                                  1
                   )
# 32 "parser.fsy"
                 : 'expr));
# 228 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "parser.fsy"
                                             1
                   )
# 34 "parser.fsy"
                 : 'term));
# 240 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'factor)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "parser.fsy"
                                    1
                   )
# 35 "parser.fsy"
                 : 'term));
# 251 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "parser.fsy"
                                     1
                   )
# 37 "parser.fsy"
                 : 'factor));
# 261 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "parser.fsy"
                                              1
                   )
# 37 "parser.fsy"
                 : 'factor));
# 271 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "parser.fsy"
                                                                       1
                   )
# 37 "parser.fsy"
                 : 'factor));
|]
# 283 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 13;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let file lexer lexbuf : int =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
